# This is the Azure CI Pipeline for the RDMnet repository that includes
# jobs for building and testing on various platforms, as well as
# deploying installers to BinTray, and deploying the head documentation
# to the gh-pages branch.

trigger:
  branches:
    include:
      - develop
      - master
      - release/*
      - refs/tags/v*.*.*.*

pr:
  - develop

variables:
  rdmnet_artifact_version: "not_initialized"
  qt_cache_dir_macos: $(Pipeline.Workspace)/Qt
  common_cmake_options: -DRDMNET_BUILD_TESTS=ON -DRDMNET_BUILD_CONSOLE_EXAMPLES=ON

stages:
  - stage: build_and_test
    displayName: "Build and Test RDMnet"
    jobs:
      # Build and test RDMnet on Windows using CMake and Visual Studio 2017.
      - job: windows_build_and_test
        displayName: "Windows"
        pool:
          vmImage: "vs2017-win2016"
        strategy:
          matrix:
            Win32:
              CMAKE_GENERATOR: "Visual Studio 15 2017"
              QT_DIRECTORY: C:\Qt\5.12.7\msvc2017
              AQT_ARCH: win32_msvc2017
              ARTIFACT_TYPE: x86
              INSTALLER_PROJECT: RDMnetInstall_x86.wixproj
              INSTALLER_ARTIFACT: bin\Release\RDMnetSetup_x86.msi
              CMAKE_INSTALL: install_x86
              VCVARSALL_PLATFORM: x86
            x64:
              CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"
              QT_DIRECTORY: C:\Qt\5.12.7\msvc2017_64
              AQT_ARCH: win64_msvc2017_64
              ARTIFACT_TYPE: x64
              INSTALLER_PROJECT: RDMnetInstall_x64.wixproj
              INSTALLER_ARTIFACT: bin\Release\RDMnetSetup_x64.msi
              CMAKE_INSTALL: install_x64
              VCVARSALL_PLATFORM: amd64
        steps:
          - template: tools/ci/azure_templates/get_qt.yml
            parameters:
              host: windows
              arch: $(AQT_ARCH)
              directory: C:/Qt
              version: 5.12.7
              cacheKey: Qt5127 | $(AQT_ARCH) | $(Agent.OS)
          - script: |
              cd $(Build.SourcesDirectory)
              mkdir build
              cd build
              cmake --version
              cmake -G "%CMAKE_GENERATOR%" -DQTDIR=%QT_DIRECTORY% -DCMAKE_INSTALL_PREFIX=%CMAKE_INSTALL% $(common_cmake_options) -DRDMNET_BUILD_GUI_EXAMPLES=ON ..
            displayName: "Configure Project"
          - task: VSBuild@1
            displayName: "Build Project"
            inputs:
              solution: $(Build.SourcesDirectory)\build\RDMnet.sln
              configuration: Release
              maximumCpuCount: true
          - script: |
              cd $(Build.SourcesDirectory)\build
              ctest -C Release -T Test --output-on-failure
            displayName: "Run Tests"
          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            inputs:
              testResultsFormat: "CTest"
              testResultsFiles: "**/Test.xml"
              testRunTitle: "Windows $(ARTIFACT_TYPE)"
              failTaskOnFailedTests: true
          - template: tools/ci/azure_templates/initialize_artifact_version.yml
          - template: tools/ci/azure_templates/windows_build_artifacts.yml

        # Build and test RDMnet on macOS using CMake and Clang.
      - job: macos_build_and_test
        displayName: "macOS"
        pool:
          vmImage: "macos-10.15"
        variables:
          - group: apple_developer_id
        steps:
          - task: InstallAppleCertificate@2
            name: macOSInstallAppCertificate
            displayName: "Install Application Certificate"
            condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
            inputs:
              certSecureFile: "macos_developerID_application.p12"
              certPwd: $(macos_app_cert_passphrase)
          # TODO: uncomment and remove next two steps once https://github.com/microsoft/azure-pipelines-tasks/issues/10792 is fixed.
          #    - task: InstallAppleCertificate@2
          #      name: macOSInstallInstallerCertificate
          #      displayName: 'Install Installer Certificate'
          #      inputs:
          #        certSecureFile: 'macos_developerID_installer.p12'
          #        certPwd: $(macos_app_cert_passphrase)
          - task: DownloadSecureFile@1
            name: macOSInstallerCert
            condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
            displayName: "Download Installer Certificate"
            inputs:
              secureFile: "macos_developerID_installer.p12"
          - script: |
              /usr/bin/security import $(macOSInstallerCert.secureFilePath) -P $(macos_app_cert_passphrase) -A -t cert -f pkcs12 -k $(macOSInstallAppCertificate.keychainPath)
            displayName: "Workaround: Add installer certificate to existing temporary keychain"
            condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
          - script: |
              brew update
              brew cask install packages
            displayName: "Install dependencies"
          - template: tools/ci/azure_templates/get_qt.yml
            parameters:
              host: mac
              directory: $(qt_cache_dir_macos)
              version: 5.12.7
              cacheKey: Qt5127aqt | $(Agent.OS)
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.7"
              addToPath: true
          - script: |
              mkdir build
              cd build
              cmake --version
              cmake -G "Unix Makefiles" -DQTDIR=$QT_DIRECTORY -DCMAKE_INSTALL_PREFIX=install $(common_cmake_options) -DRDMNET_BUILD_GUI_EXAMPLES=ON ..
              make -j4
              make install
            displayName: "Build Project"
            env:
              QT_DIRECTORY: $(qt_cache_dir_macos)/5.12.7/clang_64
          - script: |
              cd build
              ctest -T Test --output-on-failure
            displayName: "Run Tests"
          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            inputs:
              testResultsFormat: "CTest"
              testResultsFiles: "**/Test.xml"
              testRunTitle: "macOS"
              failTaskOnFailedTests: true
          - template: tools/ci/azure_templates/initialize_artifact_version.yml
          - template: tools/ci/azure_templates/macos_build_artifacts.yml
      - job: linux_build
        displayName: "Linux"
        pool:
          vmImage: "ubuntu-18.04"
        variables:
          cmake_generator: "Unix Makefiles"
          cmake_options_linux: -DCMAKE_C_FLAGS="-fsanitize=address" -DCMAKE_CXX_FLAGS="-fsanitize=address" -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address"
        # TODO install Qt for Linux build
        steps:
          - script: |
              sudo apt-get update
              sudo apt-get install uuid-dev libavahi-client-dev
              mkdir build
              cd build
              cmake --version
              cmake -G "$(cmake_generator)" $(common_cmake_options) $(cmake_options_linux) ..
              cmake --build .
            displayName: "Configure and Build Project"
          - script: |
              cd build
              ctest -T Test --output-on-failure
            displayName: "Run Tests"
          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            inputs:
              testResultsFormat: "CTest"
              testResultsFiles: "**/Test.xml"
              testRunTitle: "Linux"
              failTaskOnFailedTests: true
      - job: linux_static_build
        displayName: "Linux (Static Memory)"
        pool:
          vmImage: "ubuntu-18.04"
        variables:
          cmake_generator: "Unix Makefiles"
          cmake_options_linux: -DRDMNET_BUILD_TESTS_STATIC=ON -DRDMNET_FORCE_LIGHTWEIGHT_DNS_QUERIER=ON -DCMAKE_C_FLAGS="-fsanitize=address" -DCMAKE_CXX_FLAGS="-fsanitize=address" -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address"
        # TODO install Qt for Linux build
        steps:
          - script: |
              sudo apt-get update
              sudo apt-get install uuid-dev libavahi-client-dev
              mkdir build
              cd build
              cmake --version
              cmake -G "$(cmake_generator)" $(common_cmake_options) $(cmake_options_linux) ..
              cmake --build .
            displayName: "Configure and Build Project"
          - script: |
              cd build
              ctest -T Test --output-on-failure
            displayName: "Run Tests"
          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            inputs:
              testResultsFormat: "CTest"
              testResultsFiles: "**/Test.xml"
              testRunTitle: "Linux"
              failTaskOnFailedTests: true

      - job: documentation_deploy
        displayName: "Documentation Deploy"
        pool:
          vmImage: "ubuntu-18.04"
        condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), and(startsWith(variables['Build.SourceBranch'], 'refs/pull'), ne(variables['System.PullRequest.IsFork'], 'True')))
        steps:
          - script: |
              sudo apt-get install doxygen
            displayName: "Install Doxygen"
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.x"
              addToPath: true
          - task: ShellScript@2
            inputs:
              scriptPath: "tools/ci/publish_docs.sh"
              failOnStandardError: false
            displayName: "Generate and Push Documentation"
            env:
              GH_REPO_NAME: "RDMnet"
              GH_REPO_REF: "github.com/ETCLabs/RDMnet.git"
              SVC_ETCLABS_CREDENTIALS: "svc-etclabs:$(svc_etclabs_password)"

  - stage: deploy_binaries
    displayName: "Deploy Build Artifacts"
    condition: and(succeeded('build_and_test'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    jobs:
      - job: bintray_deploy
        displayName: "BinTray Deploy"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
              cd tools/version
              version=$(<current_version.txt)
              echo "##vso[task.setvariable variable=RDMnetVersion]$version"
            displayName: "Obtain RDMnet Version"
          - template: tools/ci/azure_templates/deploy_artifact.yml
            parameters:
              artifactName: rdmnet_windows_x64
              artifactFile: RDMnetSetup_$(RDMnetVersion)_x64.msi
              artifactVersion: $(RDMnetVersion)
          - template: tools/ci/azure_templates/deploy_artifact.yml
            parameters:
              artifactName: rdmnet_windows_x86
              artifactFile: RDMnetSetup_$(RDMnetVersion)_x86.msi
              artifactVersion: $(RDMnetVersion)
          - template: tools/ci/azure_templates/deploy_artifact.yml
            parameters:
              artifactName: rdmnet_macos
              artifactFile: RDMnet_$(RDMnetVersion).pkg
              artifactVersion: $(RDMnetVersion)
      - job: create_build_report
        displayName: "Create Jira Build Report"
        pool:
          vmImage: "ubuntu-latest"
        variables:
          - group: etc_jira
        steps:
          - task: UsePythonVersion@0
            displayName: "Select Python Version"
            inputs:
              versionSpec: "3.x"
              addToPath: true
          - script: |
              python -m pip install requests
              python tools/ci/create_build_report.py
            displayName: "Run Create Build Report Script"
            env:
              BUILDNETWORKING_PASSWORD: $(buildnetworking_password)
