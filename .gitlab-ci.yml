workflow:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

variables:
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: normal
  GLOBAL_CMAKE_OPTIONS: -DRDMNET_BUILD_TESTS=ON -DRDMNET_BUILD_CONSOLE_EXAMPLES=ON
  PROJECT_BOT_USER: project_270_bot
  SIGNTOOL: "C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.17763.0\\x86\\signtool.exe"
  
stages:
  - build
  - notarize
  - deploy

windows-build:
  stage: build
  tags:
    - ct-windows
  parallel:
    matrix:
      - CMAKE_GENERATOR_OPTIONS: -A Win32
        QT_DIRECTORY: C:\Qt_os\5.12.11\msvc2017
        CMAKE_INSTALL: install_x86
        VCVARSALL_PLATFORM: x86
        ARTIFACT_TYPE: x86
      - CMAKE_GENERATOR_OPTIONS: -A x64
        QT_DIRECTORY: C:\Qt_os\5.12.11\msvc2017_64
        CMAKE_INSTALL: install_x64
        VCVARSALL_PLATFORM: amd64
        ARTIFACT_TYPE: x64
  script:
    - python tools\ci\update_artifact_version.py
    - mkdir build
    - cd build
    - cmake -G "Visual Studio 16 2019" $env:CMAKE_GENERATOR_OPTIONS.Split(" ") "-DQTDIR=$env:QT_DIRECTORY" "-DCMAKE_INSTALL_PREFIX=$env:CMAKE_INSTALL" $env:GLOBAL_CMAKE_OPTIONS.Split(" ") -DRDMNET_BUILD_GUI_EXAMPLES=ON -DRDMNET_INCLUDE_SIGN_TOOLS=ON ..
    - cmake --build . --config Release -j
    - ctest -C Release --output-on-failure
    - cmake -P cmake_install.cmake
    - cd ..
    - .\tools\ci\windows_build_installer.bat
    - echo "Signing Installer"
    - $Env:ETC_SIGN_CREDS = "${NET_CODESIGN_USER}:${NET_CODESIGN_PASS}"
    - Start-Process -NoNewWindow -Wait -FilePath "build\_deps\etc_sign-src\etc_sign.bat" -ArgumentList "--initcert"
    - Start-Process -NoNewWindow -Wait -FilePath "build\_deps\etc_sign-src\etc_sign.bat" -ArgumentList "RDMnetSetup_$env:ARTIFACT_TYPE.msi"
  artifacts:
    when: always
    paths:
      - RDMnetSetup_$ARTIFACT_TYPE.msi
    reports:
      junit: build/tests/test-results/*.xml

macos-build:
  stage: build
  tags:
    - ct-macos
  variables:
    QT_DIRECTORY: /Users/Shared/Qt/5.9.7/clang_64
  script:
    - pip3 config set global.index-url https://artifactory.etcconnect.com/artifactory/api/pypi/ETC-PyPI/simple
    - pip3 config set global.trusted-host artifactory.etcconnect.com
    - pip3 install etcdevtool
    - python3 tools/ci/update_artifact_version.py
    - mkdir build
    - cd build
    - cmake -DQTDIR=${QT_DIRECTORY} -DCMAKE_INSTALL_PREFIX=install ${GLOBAL_CMAKE_OPTIONS} -DRDMNET_BUILD_GUI_EXAMPLES=ON -DRDMNET_INCLUDE_SIGN_TOOLS=ON ..
    - cmake --build . --config Release -j
    - cmake -P cmake_install.cmake
    - ctest --output-on-failure
    - cd ..
    - python3 tools/install/macos/macos_build_package.py
  artifacts:
    when: always
    paths:
      - RDMnet.pkg
      - build/_deps/etc_mac_notarize-src/
    reports:
      junit: build/tests/test-results/*.xml

macos-notarize:
 stage: notarize
 tags:
   - ct-mac-m2
 dependencies:
   - macos-build
 script:
   - echo 'Notarizing Installer'
   - security unlock-keychain -p build /Users/gitlab-runner/Library/Keychains/login.keychain-db
   - python3 build/_deps/etc_mac_notarize-src/notarize.py --PACKAGE_FILEPATH ./RDMnet.pkg --KEYCHAIN notarytool-password
 artifacts:
   when: always
   paths:
     - RDMnet.pkg

linux-build:
  stage: build
  tags:
    - etc-linux-docker
  image: etc-docker.artifactory.etcconnect.com/rikorose/gcc-cmake:latest
  parallel:
    matrix:
      - CMAKE_LINUX_OPTIONS: -DRDMNET_BUILD_TESTS_STATIC=OFF
      - CMAKE_LINUX_OPTIONS: -DRDMNET_BUILD_TESTS_STATIC=ON -DRDMNET_FORCE_LIGHTWEIGHT_DNS_QUERIER=ON
  script:
    - apt-get update && apt-get install -y --no-install-recommends uuid-dev libavahi-client-dev
    - mkdir build
    - cd build
    - cmake ${GLOBAL_CMAKE_OPTIONS} ${CMAKE_LINUX_OPTIONS} -DRDMNET_ENABLE_ASAN=ON ..
    - make -j `nproc`
    - ctest --output-on-failure
  artifacts:
    when: always
    reports:
      junit: build/tests/test-results/*.xml

oss-build:
  stage: build
  tags:
    - etc-linux-docker
  image: etc-docker.artifactory.etcconnect.com/etc/common-tech/gcc-cmake:latest
  script:
    - apt-get update && apt-get install -y --no-install-recommends uuid-dev libavahi-client-dev
    # Remove the .git folder to simulate building from P4/zip archive
    - rm -rf .git/
    - mkdir build
    - cd build
    # Use default config, no options
    - cmake ..
    - make -j `nproc`

docs:
  stage: build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
  tags:
    - etc-linux-docker
  image: etc-docker.artifactory.etcconnect.com/etc/common-tech/doxygen:1.9.1
  variables:
    GIT_DEPTH: 0
  script:
    - pip install --upgrade etcdevtool
    - etcdevtool docs . 1.9.1
    - mkdir docs-build
    - mv docs/build/* docs-build/
  artifacts:
    paths:
      - docs-build

deploy-docs:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
  tags:
    - etc-linux-docker
  image: etc-docker.artifactory.etcconnect.com/etc/common-tech/doxygen:1.9.1
  variables:
    GIT_DEPTH: 0
    GH_REPO_NAME: RDMnetDocs
    GH_REPO_REF: github.com/ETCLabs/RDMnetDocs.git
    GH_REPO_TOKEN: $SVC_ETCLABS_REPO_TOKEN
  script:
    - pip install --upgrade etcdevtool
    - chmod +x tools/ci/publish_docs.sh
    - tools/ci/publish_docs.sh

# Deploy versioned build
include:
  - project: 'etc/common-tech/tools/gitlab-ci-util'
    ref: v2.0.1
    file: '/ci-yml/deploy-versioned-build.yml'

deploy-artifacts:
  stage: deploy
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $NEW_BUILD_VERSION =~ /^\d+\.\d+\.\d+\.\d+$/ && $CI_COMMIT_REF_NAME == "main"'
  tags:
    - etc-linux-docker
  dependencies:
    - windows-build
    - macos-notarize
  image: etc-docker.artifactory.etcconnect.com/python:latest
  script:
    - pip install requests PyGithub
    - python3 tools/ci/deploy_to_github_release.py ${NEW_BUILD_VERSION}
